---

- name: Add user {{ adduser_user_name }}
  ansible.builtin.user:
    name: "{{ adduser_user_name }}"
    password: "{{ adduser_password | default(omit) }}"
    update_password: "{{ adduser_password_update }}"
    comment: "{{ adduser_user_comments | default(omit) }}"
    shell: "{{ adduser_shell | default('/bin/bash') }}"
    expires: "{{ adduser_expires | default(omit) }}"
  become: yes
  when: ansible_distribution != 'OpenBSD' and ansible_os_family != 'Darwin' and ansible_os_family != "Alpine"

- name: Alpine | Add user
  ansible.builtin.command: "adduser -D {{ adduser_user_name }}"
  args:
    creates: "/home/{{ adduser_user_name }}"
  become: yes
  failed_when: false
  when: ansible_os_family == "Alpine"
## else newly created account is locked
- name: Alpine | Unlock user
  ansible.builtin.command: "passwd -u {{ adduser_user_name }}"
  failed_when: false
  when: ansible_os_family == "Alpine"

- name: OpenBSD | Add user
  ansible.builtin.user:
    name: "{{ adduser_user_name }}"
    shell: "{{ adduser_shell | default('/bin/ksh') }}"
  become: yes
  when: ansible_distribution == 'OpenBSD'

## FIXME! not idempotent
- name: Darwin | Add user
  ansible.builtin.user:
    name: "{{ adduser_user_name }}"
    password: "{{ adduser_password | default(omit) }}"
    update_password: "{{ adduser_password_update }}"
    comment: "{{ adduser_user_comments | default(omit) }}"
    shell: "{{ adduser_shell | default('/bin/bash') }}"
  when: ansible_os_family == 'Darwin'
  become: yes

- name: Check home has correct permissions
  ansible.builtin.file:
    dest: "{{ adduser_user_home }}"
    owner: "{{ adduser_user_name }}"
    mode: "{{ adduser_user_home_perms }}"
    state: directory
  become: yes

- name: Debug | adduser_public_keys var
  ansible.builtin.debug:
    var: adduser_public_keys
- name: Add authorized keys for user
  ansible.posix.authorized_key:
    user: "{{ adduser_user_name }}"
    key: "{{ item }}"
  with_file: "{{ adduser_public_keys }}"
  when: adduser_public_keys is defined and adduser_public_keys != [] and adduser_sshkey_options is not defined
  become: yes
  # Either user must exist or you must provide full path to key file in check mode
  check_mode: no
  ignore_errors: "{{ ansible_check_mode }}"
- name: Add authorized keys with key_options for user - {{ adduser_user_name }}
  ansible.builtin.authorized_key:
    user: "{{ adduser_user_name }}"
    key: "{{ item }}"
    key_options: "{{ adduser_sshkey_options }}"
  with_file: "{{ adduser_public_keys }}"
  when: adduser_public_keys is defined and adduser_public_keys != [] and adduser_sshkey_options is defined
  become: yes
  check_mode: no
  ignore_errors: "{{ ansible_check_mode }}"

- name: SSH authorized_keys {{ adduser_user_name }}
  ansible.builtin.file:
    dest: "{{ adduser_user_home }}/.ssh"
    owner: "{{ adduser_user_name }}"
    mode: '0700'
    state: directory
  become: yes
  when: ansible_distribution != 'OpenBSD' and ansible_os_family != 'Darwin'

- name: Get /etc/sudoers stat
  ansible.builtin.stat: path=/etc/sudoers
  register: sudoers
- name: Sudo
  when: adduser_sudoroot is defined and adduser_sudoroot and sudoers.stat.exists
  block:
    - name: Debian | set groups
      ansible.builtin.set_fact:
        final_groups: "{{ adduser_groups + ['adm'] }}"
      when: ansible_os_family == "Debian"
    - name: RedHat | set groups
      ansible.builtin.set_fact:
        final_groups: "{{ adduser_groups + ['wheel'] }}"
      when: ansible_os_family == "RedHat"
    - name: Add user directly in sudoers if no defined admin group
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        regexp: "^{{ adduser_user_name }} ALL"
        line: "{{ adduser_user_name }} ALL=(ALL) ALL"
        state: present
        mode: '0440'
        backup: yes
        validate: 'visudo -cf %s'
      become: yes
      when: not (ansible_os_family == "Debian" or ansible_os_family == "RedHat")
    - name: Allow nopasswd statement
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        regexp: "^{{ adduser_user_name }} ALL="
        line: "{{ adduser_user_name }} ALL=(ALL) NOPASSWD: {{ adduser_sudoroot_nopasswd_cmd | default('/usr/bin/whoami') }}"
        state: present
        backup: yes
        mode: '0440'
        validate: 'visudo -cf %s'
      become: yes
      when: adduser_sudoroot_nopasswd

- name: Add user to groups
  ansible.builtin.user:
    name: "{{ adduser_user_name }}"
    append: yes
    groups: "{{ final_groups | default(adduser_groups) | join(',') }}"
  when: ansible_distribution != 'OpenBSD' and ansible_os_family != 'Darwin' and ansible_os_family != "Alpine"
- name: Alpine | Add user to group
  ansible.builtin.command: "addgroup {{ adduser_user_name }} {{ item }}"
  with_items: "{{ final_groups | default(adduser_groups) }}"
  become: yes
  failed_when: false
  when: ansible_os_family == "Alpine"

- name: Get /etc/doas.conf stat
  ansible.builtin.stat: path=/etc/doas.conf
  register: doas
- name: Add user to doas.conf
  ansible.builtin.lineinfile:
    dest: /etc/doas.conf
    regexp: '^permit {{ adduser_user_name }} as '
    line: 'permit {{ adduser_user_name }} as root'
    state: present
    mode: '0440'
    create: yes
  become: yes
  when: adduser_sudoroot is defined and adduser_sudoroot and doas.stat.exists
